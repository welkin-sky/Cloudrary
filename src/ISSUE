lingkerio：
目前我没有明白的事情是：
具体的这些类的应用场景是什么？我目前的理解是：
比如说，假设我要增加一本书，那么输入这本书的信息时，可以输入自定义的书籍分类（没有的分类就新建，反正分类信息什么的用json就好），如果这个分类存在，那么从json中应该读取出一个Library对象，add方法给加进去，删除同理。
如果要进行，某一类的文件排序（这个排序当然是我们程序GUI显示的而不是文件夹内了，毕竟文件夹会自动排序），那么这个时候不需要名字就读取一个BookList，那么分类内搜索书籍也是同理；
分类外搜索书籍，就采用base类将所有分类的信息都读取出来搜索。

welkinsky:
我的想法是，有些情况下不需要带名字的书单。例如对书单进行排序时，会生成一个临时的有序的列表，这个列表是booklist
library主要表示持久性的，用户添加的书单。结构是：用户可以定义多个书库（Library），其中有各种Books，Library是最终存储到磁盘的
用户可能对Library进行按标签排序或者搜索的操作，此时前端需要后端返回一个子列表，这个列表不需要名字，则用Booklist，防止直接对library进行破坏性操作。
BookList主要是考虑前后端的交互而添加的。至于为什么抽象为两个类，主要是考虑Library之后可能会有更多的属性，比如可以给Library添加不同的颜色，方便用户管理之类的。
并且Library不重视顺序，毕竟用户会通过操作要求排序，这时会返回有序的Booklist。

Base类是存library的，因为用户会有多个Library。Base类应该是单例的。
我感觉暂时不需要在Base上进行操作。
之后会在BookList类里添加根据各标签分类的方法。这样前端可以例如 BookList bl = library.findXX(""); show(bl); 之类的方法显示了。
这两天好忙啊 得抓紧写辣

